##### Sortino and Sharpe Ratio

avg_return_S = np.mean(All_Weather_S.Value) - 30000
avg_return_B = np.mean(All_Weather_B.Value) - 55000
avg_return_C= np.mean(All_Weather_C.Value) - 15000

print(avg_return_S, avg_return_B, avg_return_C)

downside_returns_S = All_Weather_S.Value[All_Weather_S.Value < 0]
down_deviation_S = np.std(downside_returns_S)

downside_returns_B = All_Weather_B.Value[All_Weather_B.Value < 0]
down_deviation_B = np.std(downside_returns_B)

downside_returns_C = All_Weather_C.Value[All_Weather_C.Value < 0]
down_deviation_C = np.std(downside_returns_C)



N = 255 #Number of trading days in a year
rf =0.042 #4,2% Treasury Rate 10 year
epsilon = 1e-6  # A small value to avoid division by zero

sortino_ratio_S = (avg_return_S - rf) / (down_deviation_S+ epsilon)
sortino_ratio_B = (avg_return_B - rf) / (down_deviation_B+ epsilon)
sortino_ratio_C = (avg_return_C - rf) / (down_deviation_C+ epsilon)

print(sortino_ratio_S, sortino_ratio_B, sortino_ratio_C)

std_dev_S = np.std(All_Weather_S.Value-30000)
sharpe_ratio_S = (avg_return_S - rf) / std_dev_S

std_dev_B = np.std(All_Weather_B.Value-55000)
sharpe_ratio_B = (avg_return_B - rf) / std_dev_B

std_dev_C = np.std(All_Weather_C.Value-15000)
sharpe_ratio_C = (avg_return_C - rf) / std_dev_C
print(sharpe_ratio_S, sharpe_ratio_B, sharpe_ratio_C)


Portfolio_returns=(((All_Weather_S.Value - 30000)) + ((All_Weather_B.Value - 55000)) + ((All_Weather_C.Value - 15000)))
print(Portfolio_returns.fillna(0))
avg_Portfolio_returns=Portfolio_returns.mean()
downside_returns = Portfolio_returns[Portfolio_returns<0]
downside_deviation = np.std(downside_returns)
sortino_ratio = (avg_Portfolio_returns - rf) / (downside_deviation+epsilon)
print(sortino_ratio)
portfolio_std_dev = np.std(Portfolio_returns)
sharpe_ratio = (avg_Portfolio_returns - rf) / portfolio_std_dev
print(sharpe_ratio)
portfolio_std_dev = Portfolio_returns.std()
print(portfolio_std_dev)
downside_returns = Portfolio_returns[Portfolio_returns < 0]
print(downside_returns)

annualized_return = (Portfolio_returns).mean()/252 
downside_deviation = np.std(downside_returns, ddof=1)  # Use Bessel's correction by setting ddof=1

sortino_ratio = (annualized_return - rf) / (downside_deviation)
print('Sortino Ratio:', sortino_ratio)

portfolio_std_dev = Portfolio_returns.std(ddof=1)/np.sqrt(255)  # Use Bessel's correction by setting ddof=1
print('Portfolio Standard Deviation:', portfolio_std_dev)
print('Portfolio Volatility:', portfolio_std_dev//100,'%')
Portfolio_value=Portfolio_returns+100000
print(Portfolio_value)
print(avg_Portfolio_returns)
plt.plot(All_Weather_C.Date, Portfolio_returns)
plt.plot(All_Weather_C.Date, Portfolio_value)
